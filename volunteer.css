/*****************************
Class Requirements
CSS Features List
A navigation menu that expands and collapses properly at desktop and mobile sizes, such as by switching between vertical and horizontal styles, or is opened and closed by clicking the “hamburger” icon
--the media queries added

Use Flexbox or CSS Grid to organize content areas based on mobile or desktop views. Simply applying a basic flex property so that text wraps as you change screen sizes does not count. 
--mobile layout is flex-direction column, all other screens are flex-direction row
You must actually rearrange content or perform some more advanced feature. For example, swapping from a single column layout to a two-column layout on desktop.
--done, mine goes from a four column layout to three to two to one as the page gets smaller

Import Bootstrap from a CDN, then use Bootstrap’s column system to organize content areas based on mobile or desktop views (cannot be used on the same page as the Flexbox/CSS Grid requirement above). 
Note: Bootstrap is an optional Treehouse video

Use “:nth-child” or “nth-of-type” to style a series of elements on your page - for example, change the background color for every other row in a table 
Perform a Web Accessibility Compliance review on your own site and document all the tools and testing you used to verify your site is accessible. This may involve a written write-up, screenshots, and other ways of showing that you evaluated your site for accessibility compliance. Include the report in your GitHub repository.
Create your own original CSS animation. For example, create a loading spinner or menu animation. Note: CSS Animations are not included in the assigned Treehouse track, you will have to research this on your own
Create a custom video player with at least one custom element (such as the progress bar, play button, etc). This is also not covered in the required Treehouse content.
Other features can be added to this list with mentor or staff permission, but we want to see you stretch your skills, so you’ll want to pick something challenging.


******************************/

/******************************
Main Content
*******************************/
*, *:before, *:after {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
  
}
main {
  display: flex;
  flex: 1;
  flex-direction: row;
  -ms-flex-align: center;
  min-height: 100vh;
  color: #5aa0e6;
  background-color: none;
  display: flex;
  width:50%;
  margin: 0 auto;
  font-family: Arial, Helvetica, sans-serif;
}

/******************************
      Header
*******************************/


.header {
  display: flex;
  flex-direction: row;
  margin: 5px;
  padding: 25px;
  background: white;
  height: 55%;
}


/******************************
      Elements in the body
*******************************/
.firstParagraph, .mission_statement {
  display: inline-flex;
  align-items: center;
  flex-direction: column;
  background: transparent;
  color: rgb(12, 11, 70);
  margin: 5px;
  padding: 5px;
}

/* for a long time, the mission statement floated in to the right
but after I added the flex-end attribute to align-content, it centered nicely*/
.mission_statement {
  display: flex;
  align-content: flex-end;
}
.mission_statement:hover {
  height: 33%
  
}

footer {
  background: #b9bde6;
  background: -moz-linear-gradient(45deg, #b9bde6 0%, #1c6EA4 37%, #C59237 100%);
  background: -webkit-linear-gradient(45deg, #b9bde6 0%, #1C6EA4 37%, #C59237 100%);
  background: linear-gradient(45deg, #b9bde6 0%, #1C6EA4 37%, #C59237 100%);
  }

 h1 {
  -webkit-box-shadow: 5px 5px 15px 5px #000000; 
  box-shadow: 5px 5px 15px 5px #000000;
 } 

 nav {
   list-style: none;
   font-weight: bold;
 }
 
.options, footer {
  display: flex;
  flex: 1 100%;
  min-height: auto;
  flex-direction: row;
  flex-wrap: wrap;
  margin: 2rem;
  padding: 5px;
  background: transparent;
  color: rgb(2, 51, 2);
} 
/******************************
      Photos and a Carousel
*******************************/
#carousel {
   
    width: 30%;
    height: 30%;
    position: relative; 
    transform-style: preserve-3d;
    animation: rotation 30s  infinite linear;
    /*the perspective is important and needs to be above 1000rem*/
    perspective: 2000rem;
    margin: 100px auto 0 auto;
}
#carousel:hover{
    animation-play-state: paused;
}
#carousel figure{
   /* this was my first, but the pictures were a bit clunky, 
    display: flex;
    position:inherit;
    width: 90%;
    height: 78%;
    left: 10px;
    top: 10px;
    background: black;
    overflow: hidden;
    border: solid 5px black;
    margin: 1rem; */
  position: absolute;
  width: 300px;
  height: 187px;
  top: 20px;
  left: 10px;
  right: 10px;
  background-size: cover;
  box-shadow:inset 0 0 0 2000px rgba(0,0,0,0.5);
  display: flex;
}
#carousel figure:nth-child(1){transform: rotateY(0deg) translateZ(430px);}
#carousel figure:nth-child(2){ transform: rotateY(72deg) translateZ(430px);}
#carousel figure:nth-child(3){ transform: rotateY(144deg) translateZ(430px);}
#carousel figure:nth-child(4){ transform: rotateY(216deg) translateZ(430px);}
#carousel figure:nth-child(5){ transform: rotateY(288deg) translateZ(430px);}



#carousel img{
    -webkit-filter: grayscale(1);
    cursor: pointer;
    transition: all .5s ease;
    width: 75%;
}
#carousel img:hover{
    -webkit-filter: grayscale(0);
    transform: scale(2.4,2.4);
}
@keyframes rotation{
    from{
        transform: rotateY(0deg);
    }
    to{
        transform: rotateY(-360deg);
    }
}





 /******************************
            Buttons
*******************************/
.showTimeButton, .changeHeading {
  display: inline;
  margin: 5px;
  border-color: grey;
  background-color: transparent;
  text-align: center;
}

.itemsContainerDiv {
    display: inline-flex;
    flex-direction:column;
    flex: 1;
    color: rgb(10, 7, 7);
}

.itemsContainerDiv:hover { -moz-transform: scale(1.3);
  -webkit-transform: scale(1.3);
  -o-transform: scale(1.3);
  -ms-transform: scale(1.3);
  transform: scale(1.3);
  display: inline-flex;
  }
  /*or 
.itemsContainerDiv:hover {
    color: black;
    background: #666666;
    -webkit-background-clip: text;
    -moz-background-clip: text;
    background-clip: text;
    text-shadow: 0px 3px 3px rgba(255,255,255,0.5);
}
*/
#showTimeButton {
  display: inline-flex;
  background-color: whitesmoke;
  color: rgb(45, 33, 224);
  height: 55%;
  margin: auto;
  box-shadow: text-shadow 0px 3px 3px rgba(255,255,255,0.5);
  border: solid grey;
  padding: 5px;
}

/******************************
Flexbox Layout
*******************************/

.header {
    display: flex;
    flex-direction: column;
    flex: 2;
    margin: auto;
    justify-items: space-around;
    align-content: center;
    background-color: transparent;
  }
  
    /******************************
    screen sizes
  *******************************/

  /* mobile first!! */
  @media all and (min-width: 320px) {
    body { flex-direction: column; }
    .randomPhoto {flex-direction: column;}
    #fillerParagraphs {flex-direction: column;}
 }

  @media all and (min-width: 640px) {
    body {
      flex-direction: column;
    }
  }

  @media all and (min-width: 769px) {
    body { flex-direction: row; }
    .randomPhoto {flex-direction: row;}
    #fillerParagraphs {
      display: flex;
      flex-direction: column;
      flex: 1 100%;
      min-height: auto;
      flex-direction: row;
      flex-wrap: wrap;
      margin: 2rem;
      padding: 5px;
      background: transparent;
      color: rgb(8, 194, 8);
  }
}
  
  @media all and (min-width: 1030px) {
    body { flex-direction: row; }
    #fillerParagraphs {
      display: flex;
      flex: 1 100%;
      min-height: auto;
      flex-direction: row;
      flex-wrap: wrap;
      margin: 2rem;
      padding: 5px;
      background: transparent;
      color: rgb(231, 20, 38);
  }
}
  